require('dotenv').config()
const express = require("express");
const app = express();
const port = 3000;

const bodyParser = require("body-parser");
const speech = require("./SpeechSynthesis");
const path = require('path');
const swaggerJsDoc = require('swagger-jsdoc');
const swaggerUi = require ('swagger-ui-express');
app.use(bodyParser.urlencoded({ extended: false }));
app.use(bodyParser.json());
const axios = require('axios');
const cors = require('cors')
const { body, validationResult } = require('express-validator');

const options = {
  swaggerDefinition: {
      info: {
          title: 'Microsoft Azure Text to Speech API',
          version:'1.0.0',
          description: 'Microsoft Azure Text to Speech API autogenerated by Swagger'
      },
      host: 'localhost:3000',
      basePath: '/',
  },
  apis: ['./app.js']
}
  
const specs = swaggerJsDoc(options)

app.use('/docs',swaggerUi.serve,swaggerUi.setup(specs))
app.use(cors())

app.get('/', (req,res) => {
  res.send('GET API /voices<br>POST API /texttospeech<br>Swagger /docs')
});

/**
 * @swagger
 * /voices:
 *    get:
 *      description: Return the list of voices available
 *      produces:
 *          - application/json
 *      responses:
 *          200:
 *              description: Array containing the ShortName of the voices
 *          400:
 *              description: Incorrect request
 */
app.get('/voices', (req,res) => {
  axios.get(process.env.VOICE_LIST_API_ENDPOINT, {
		headers: {
			'Ocp-Apim-Subscription-Key': process.env.API_KEY
		}
	})
    .then(result => {
        res.status(200)
		    let voices = [];
		    for (i = 0; i < result.data.length; i++) {
			      voices.push(result.data[i]['ShortName'])
		      }
        res.json(voices)
    })
    .catch(err => {
        res.status(400)
        res.send(err)
    })
});

/**
 * @swagger
 * /texttospeech:
 *    post:
 *      description: Convert text to speech
 *      produces:
 *          - audio/wav
 *      parameters:
 *          - name: Text to Speech
 *            in: body
 *            required: true
 *            schema:
 *                $ref: "#/definitions/texttospeech"
 *      responses:
 *          200:
 *              description: Converted text to speech successfully
 *          400:
 *              description: Incorrect parameters
 *          500:
 *              description: Server Error
 */
app.post('/texttospeech', [body('text','text is required').trim().not().isEmpty(),
body('voice','voice is required').trim().not().isEmpty(),
body('speed').isInt({ min: -100, max: 200 }).withMessage('Speed should be an integer between -100 and 200'),
body('pitch').isInt({ min: -50, max: 50 }).withMessage('Pitch should be an integer between -50 and 50')], (req,res) => {

  const err = validationResult(req)
  if (!err.isEmpty()) {
    res.statusCode = 400
    res.json({err:err.array()})
    return;
  }

  const {text, voice, speed, pitch}=req.body

  axios.get(process.env.VOICE_LIST_API_ENDPOINT, {
    headers: {
      'Ocp-Apim-Subscription-Key': process.env.API_KEY
    }
  })
    .then(result => {
        let error = false;
        let message = '';
        let voices = [];
        for (i = 0; i < result.data.length; i++) {
          voices.push(result.data[i]['ShortName'])
        }

        if (!voices.includes(voice) && text.split(' ').length > 900) {
          error = true;
          message = 'Incorrect voice and Text is too long';
        }
        else if (!voices.includes(voice)) {
          error = true;
          message = 'Incorrect voice';
        }
        else if (text.split(' ').length > 900) {
          error = true;
          message = 'Text too long';
        }
        if (!error) {
          speech.textToSpeechApi(text, voice, speed, pitch)
          .then(result => {
              let filePath = path.join(__dirname, "AudioFile.wav");
              res.download(filePath,"AudioFile.wav");
          }, failure => {
              res.status(500)
              res.send(failure)
          })
          .catch(err => {
              res.status(400)
              res.send(err)
          })
        }
        else {
          res.status(400)
          res.json({err: {message}})
        }
    })
    .catch(err => {
        res.status(400);
        res.send(err);
    })
});

app.use((req, res) => {
    res.status(404).send('Page not found')
});

app.listen(port, () => {
  console.log('API running on port',port);
});

/**
 * @swagger
 * definitions:
 *    texttospeech:
 *        type: object
 *        required:
 *            - "text"
 *            - "voice"
 *            - "speed"
 *            - "pitch"
 *        properties:
 *            text:
 *                type: string
 *                example: Hi this is Aniket!
 *            voice:
 *                type: string
 *                example: en-US-JennyNeural
 *            speed:
 *                type: integer
 *                example: 20
 *                minimum: -100
 *                maximum: 200
 *            pitch:
 *                type: integer
 *                example: -10
 *                minimum: -50
 *                maximum: 50
 */